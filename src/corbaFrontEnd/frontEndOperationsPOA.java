package corbaFrontEnd;

import java.io.IOException;

/**
* corbaFrontEnd/frontEndOperationsPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from Corba.idl
* Saturday, November 23, 2019 4:46:53 PM EST
*/

public abstract class frontEndOperationsPOA extends org.omg.PortableServer.Servant
 implements corbaFrontEnd.frontEndOperationsOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("bookAppointment", new java.lang.Integer (0));
    _methods.put ("getAppointmentSchedule", new java.lang.Integer (1));
    _methods.put ("cancelAppointment", new java.lang.Integer (2));
    _methods.put ("addAppointment", new java.lang.Integer (3));
    _methods.put ("removeAppointment", new java.lang.Integer (4));
    _methods.put ("listAppointmentAvailability", new java.lang.Integer (5));
    _methods.put ("swapAppointment", new java.lang.Integer (6));
    _methods.put ("shutdown", new java.lang.Integer (7));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {
       case 0:  // corbaFrontEnd/frontEndOperations/bookAppointment
       {
         String patientID = in.read_string ();
         String appointmentID = in.read_string ();
         String appointmentType = in.read_string ();
         String $result = null;
         try {
			$result = this.bookAppointment (patientID, appointmentID, appointmentType);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 1:  // corbaFrontEnd/frontEndOperations/getAppointmentSchedule
       {
         String patientID = in.read_string ();
         String $result = null;
         try {
			$result = this.getAppointmentSchedule (patientID);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 2:  // corbaFrontEnd/frontEndOperations/cancelAppointment
       {
         String patientID = in.read_string ();
         String appointmentID = in.read_string ();
         String $result = null;
         try {
			$result = this.cancelAppointment (patientID, appointmentID);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 3:  // corbaFrontEnd/frontEndOperations/addAppointment
       {
         String appointmentID = in.read_string ();
         String appointmentType = in.read_string ();
         int capacity = in.read_long ();
         String adminID = in.read_string ();
         String $result = null;
         try {
			$result = this.addAppointment (appointmentID, appointmentType, capacity, adminID);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 4:  // corbaFrontEnd/frontEndOperations/removeAppointment
       {
         String appointmentID = in.read_string ();
         String appointmentType = in.read_string ();
         String adminID = in.read_string ();
         String $result = null;
         try {
			$result = this.removeAppointment (appointmentID, appointmentType, adminID);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 5:  // corbaFrontEnd/frontEndOperations/listAppointmentAvailability
       {
         String appointmentType = in.read_string ();
         String $result = null;
         try {
			$result = this.listAppointmentAvailability (appointmentType);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 6:  // corbaFrontEnd/frontEndOperations/swapAppointment
       {
         String patientID = in.read_string ();
         String oldAppointmentID = in.read_string ();
         String oldAppointmentType = in.read_string ();
         String newAppointmentID = in.read_string ();
         String newAppointmentType = in.read_string ();
         String $result = null;
         try {
			$result = this.swapAppointment (patientID, oldAppointmentID, oldAppointmentType, newAppointmentID, newAppointmentType);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 7:  // corbaFrontEnd/frontEndOperations/shutdown
       {
         this.shutdown ();
         out = $rh.createReply();
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:corbaFrontEnd/frontEndOperations:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public frontEndOperations _this() 
  {
    return frontEndOperationsHelper.narrow(
    super._this_object());
  }

  public frontEndOperations _this(org.omg.CORBA.ORB orb) 
  {
    return frontEndOperationsHelper.narrow(
    super._this_object(orb));
  }


} // class frontEndOperationsPOA
